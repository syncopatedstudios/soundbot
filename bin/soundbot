#!/usr/bin/env ruby

dir = File.join(File.dirname(__FILE__), '..', 'lib')
$LOAD_PATH.unshift dir unless $LOAD_PATH.include?(dir)


require 'soundbot'

##################################################
### this is run after soundbot.rb
### config, util and soundbot modules are loaded
##################################################


program :name, 'soundbot'
program :version, '0.1.0'
program :description, 'organize, search, group and select sound files'

command :config do |c|
  c.syntax = 'soundbot config'
  c.description = 'Displays config'
  #using --no- will return false otherwise will return true
  c.option '--[no-]display', 'displays current config'
  #if the option is passed as a string then anything after a string with be an arg
  c.option '--generate', 'generates default config'
  c.action do |args, options|
    # TODO: error handling. if display is selected before generate, we get a file not found message:
    # home/b08x/Workspace/soundbot/lib/soundbot/config.rb:34:in `initialize': No such file or directory @ rb_sysopen - /home/b08x/.config/soundbot/config.yml (Errno::ENOENT)
    if options.generate
      say "setting default config"
      Soundbot::Config.set_default_config
      puts "#{Soundbot::Config.load_config}"
    elsif options.display
      say "#{options.display}"
      puts "#{Soundbot::Config.load_config}"
    end
  end
end

command :add do |c|
  c.syntax = 'soundbot add'
  c.description = 'add sound files'
  #using --no- will return false otherwise will return true
  c.option '-p','--path STRING', String, 'import one or more files'
  c.action do |args, options|
    puts "addings sounds from #{args} or #{options.path} to database"
    if args.empty?
      import_path = ENV["PWD"] + "/"
      puts import_path
    end
  end

  #if the option is passed as a string then anything after a string with be an arg
  # c.option '--generate STRING', String, 'generates default config'
  # c.action do |args, options|
  #   say "#{options.display} #{args}"
  #   say "#{options.generate} #{args}"
  # end
end

command :start do |cmd|
  cmd.syntax = 'soundbot start'
  cmd.description = 'start a linux sound layer service'
  cmd.option '--reload', 'reloads jack dbus'
  cmd.option '--pulse', 'starts pulse along with jack'
  cmd.action do |args, options|
    say "starting jack service"
      if options.pulse
        SoundLayer::start_pulse
      else
        SoundLayer::stop_pulse
        SoundLayer::start_jack
      end
  end
end

command :levels do |cmd|
  cmd.syntax = 'soundbot levels'
  cmd.description = 'ensure alsamixer is what you expect it to be'
  cmd.option '--mute', 'why not? mute alsa'
  cmd.action do |args, options|


  end
end

# add, update and delete files from the database

[15] pry(main)> add_file = MAIN_CONTAINER.commands[:files].add

=> #<CreateSound relation=#<Sounds name=ROM::Relation::Name(sounds) dataset=#<Sequel::SQLite::Dataset: "SELECT `sounds`.`id`, `sounds`.`filename`, `sounds`.`location`, `sounds`.`type` FROM `sounds` ORDER BY `sounds`.`id`">> options={:relation=>#<Sounds name=ROM::Relation::Name(sounds) dataset=#<Sequel::SQLite::Dataset: "SELECT `sounds`.`id`, `sounds`.`filename`, `sounds`.`location`, `sounds`.`type` FROM `sounds` ORDER BY `sounds`.`id`">>, :type=>nil, :source=>#<Sounds name=ROM::Relation::Name(sounds) dataset=#<Sequel::SQLite::Dataset: "SELECT `sounds`.`id`, `sounds`.`filename`, `sounds`.`location`, `sounds`.`type` FROM `sounds` ORDER BY `sounds`.`id`">>, :result=>:one, :input=>#<Dry::Types[Constructor<Schema<type_fn=/home/b08x/.rvm/gems/ruby-2.7.2@soundbot/gems/rom-core-5.2.3/lib/rom/schema.rb:67 keys={id?: Nominal<Integer meta={primary_key: true, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:id>}> filename?: Sum<Constrained<Nominal<NilClass> rule=[type?(NilClass)]> | Nominal<String meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:filename>}> meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:filename>}> location?: Sum<Constrained<Nominal<NilClass> rule=[type?(NilClass)]> | Nominal<String meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:location>}> meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:location>}> type?: Sum<Constrained<Nominal<NilClass> rule=[type?(NilClass)]> | Nominal<String meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:type>}> meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:type>}>}> fn=Kernel.Hash>]>, :curry_args=>[], :before=>[], :after=>[:finalize], :associations=>{}, :configured_associations=>[]}>


[3] pry(main)> add_file.call(filename: "a sound file", location: "/path", type: "sf2")
=> {:id=>1, :filename=>"a sound file", :location=>"/path", :type=>"sf2"}


[17] pry(main)> update_file = MAIN_CONTAINER.commands[:files].update
=> #<UpdateSound relation=#<Sounds name=ROM::Relation::Name(sounds) dataset=#<Sequel::SQLite::Dataset: "SELECT `sounds`.`id`, `sounds`.`filename`, `sounds`.`location`, `sounds`.`type` FROM `sounds` ORDER BY `sounds`.`id`">> options={:relation=>#<Sounds name=ROM::Relation::Name(sounds) dataset=#<Sequel::SQLite::Dataset: "SELECT `sounds`.`id`, `sounds`.`filename`, `sounds`.`location`, `sounds`.`type` FROM `sounds` ORDER BY `sounds`.`id`">>, :type=>nil, :source=>#<Sounds name=ROM::Relation::Name(sounds) dataset=#<Sequel::SQLite::Dataset: "SELECT `sounds`.`id`, `sounds`.`filename`, `sounds`.`location`, `sounds`.`type` FROM `sounds` ORDER BY `sounds`.`id`">>, :result=>:many, :input=>#<Dry::Types[Constructor<Schema<type_fn=/home/b08x/.rvm/gems/ruby-2.7.2@soundbot/gems/rom-core-5.2.3/lib/rom/schema.rb:67 keys={id?: Nominal<Integer meta={primary_key: true, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:id>}> filename?: Sum<Constrained<Nominal<NilClass> rule=[type?(NilClass)]> | Nominal<String meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:filename>}> meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:filename>}> location?: Sum<Constrained<Nominal<NilClass> rule=[type?(NilClass)]> | Nominal<String meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:location>}> meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:location>}> type?: Sum<Constrained<Nominal<NilClass> rule=[type?(NilClass)]> | Nominal<String meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:type>}> meta={limit: 255, source: ROM::Relation::Name(sounds), qualified: true, sql_expr: #<Sequel::SQL::QualifiedIdentifier @table=>:sounds, @column=>:type>}>}> fn=Kernel.Hash>]>, :curry_args=>[], :before=>[], :after=>[:finalize], :associations=>{}, :configured_associations=>[]}>


##########-----
[5] pry(main)> update_file.by_id(1).call(filename: "yet another different name")
=> [{:id=>1, :filename=>"yet another different name", :location=>"/path", :type=>"sf2"}]
